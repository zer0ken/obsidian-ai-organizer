/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OrganizerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/setting-tab.ts
var import_obsidian2 = require("obsidian");

// src/i18n.ts
var import_obsidian = require("obsidian");

// src/languages/en.json
var en_default = {
  "organizer_plugin.activate_view": "Open Organizer in sidebar",
  "organizer_plugin.leaf_is_null": "Cannot open sidebar",
  "organizer_view.file_selector.title": "Selected File",
  "organizer_view.file_selector.placeholder": "Select a note to reorganize",
  "organizer_view.select_current_note": "Select Current Note",
  "organizer_view.start_organizing": "Reorganize Selected Note",
  "settings.title": "Plugin Settings",
  "settings.model.name": "Model",
  "settings.model.desc": "Enter the Gemini model to use",
  "settings.model.placeholder": "Enter model name",
  "settings.gemini_api_key.name": "Gemini API Key",
  "settings.gemini_api_key.desc": "Enter your Gemini API key",
  "settings.gemini_api_key.placeholder": "Enter key",
  "settings.prompt_template.name": "Prompt Template",
  "settings.prompt_template.desc": "Enter prompt template",
  "settings.prompt_template.placeholder": "Enter prompt"
};

// src/languages/ko.json
var ko_default = {
  "organizer_plugin.activate_view": "\uC0AC\uC774\uB4DC\uBC14\uC5D0\uC11C Organizer \uC5F4\uAE30",
  "organizer_plugin.leaf_is_null": "\uC0AC\uC774\uB4DC\uBC14\uB97C \uC5F4 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
  "organizer_view.file_selector.title": "\uC120\uD0DD\uB41C \uD30C\uC77C",
  "organizer_view.file_selector.placeholder": "\uC7AC\uAD6C\uC131\uD560 \uB178\uD2B8\uB97C \uC120\uD0DD\uD558\uC138\uC694",
  "organizer_view.select_current_note": "\uD604\uC7AC \uB178\uD2B8 \uC120\uD0DD",
  "organizer_view.start_organizing": "\uC120\uD0DD\uB41C \uB178\uD2B8 \uC7AC\uAD6C\uC131",
  "settings.title": "\uD50C\uB7EC\uADF8\uC778 \uC124\uC815",
  "settings.model.name": "\uBAA8\uB378",
  "settings.model.desc": "\uC0AC\uC6A9\uD560 Gemini \uBAA8\uB378\uC744 \uC785\uB825\uD558\uC138\uC694",
  "settings.model.placeholder": "\uBAA8\uB378 \uC774\uB984 \uC785\uB825",
  "settings.gemini_api_key.name": "Gemini API \uD0A4",
  "settings.gemini_api_key.desc": "Gemini API \uD0A4\uB97C \uC785\uB825\uD558\uC138\uC694",
  "settings.gemini_api_key.placeholder": "\uD0A4 \uC785\uB825",
  "settings.prompt_template.name": "\uD504\uB86C\uD504\uD2B8 \uD15C\uD50C\uB9BF",
  "settings.prompt_template.desc": "\uD504\uB86C\uD504\uD2B8 \uD15C\uD50C\uB9BF\uC744 \uC785\uB825\uD558\uC138\uC694",
  "settings.prompt_template.placeholder": "\uD504\uB86C\uD504\uD2B8 \uC785\uB825"
};

// src/languages/ja.json
var ja_default = {
  "organizer_plugin.activate_view": "\u30B5\u30A4\u30C9\u30D0\u30FC\u3067Organizer\u3092\u958B\u304F",
  "organizer_plugin.leaf_is_null": "\u30B5\u30A4\u30C9\u30D0\u30FC\u3092\u958B\u3051\u307E\u305B\u3093",
  "organizer_view.file_selector.title": "\u9078\u629E\u3055\u308C\u305F\u30D5\u30A1\u30A4\u30EB",
  "organizer_view.file_selector.placeholder": "\u518D\u69CB\u6210\u3059\u308B\u30CE\u30FC\u30C8\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044",
  "organizer_view.select_current_note": "\u73FE\u5728\u306E\u30CE\u30FC\u30C8\u3092\u9078\u629E",
  "organizer_view.start_organizing": "\u9078\u629E\u3057\u305F\u30CE\u30FC\u30C8\u3092\u518D\u69CB\u6210",
  "settings.title": "\u30D7\u30E9\u30B0\u30A4\u30F3\u8A2D\u5B9A",
  "settings.model.name": "\u30E2\u30C7\u30EB",
  "settings.model.desc": "\u4F7F\u7528\u3059\u308BGemini\u30E2\u30C7\u30EB\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044",
  "settings.model.placeholder": "\u30E2\u30C7\u30EB\u540D\u3092\u5165\u529B",
  "settings.gemini_api_key.name": "Gemini API\u30AD\u30FC",
  "settings.gemini_api_key.desc": "Gemini API\u30AD\u30FC\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044",
  "settings.gemini_api_key.placeholder": "\u30AD\u30FC\u3092\u5165\u529B",
  "settings.prompt_template.name": "\u30D7\u30ED\u30F3\u30D7\u30C8\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8",
  "settings.prompt_template.desc": "\u30D7\u30ED\u30F3\u30D7\u30C8\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044",
  "settings.prompt_template.placeholder": "\u30D7\u30ED\u30F3\u30D7\u30C8\u3092\u5165\u529B"
};

// src/i18n.ts
var translations = {
  en: en_default,
  ko: ko_default,
  ja: ja_default
};
function t(key) {
  var _a;
  const lang = import_obsidian.moment.locale();
  const translation = ((_a = translations[lang]) == null ? void 0 : _a[key]) || en_default[key] || key;
  return translation;
}

// src/setting-tab.ts
var DEFAULT_SETTINGS = {
  model: "gemini-2.0-flash-001",
  geminiApiKey: "",
  promptTemplate: "You are a helpful AI assistant."
};
var OrganizerPluginSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: t("settings.title") });
    new import_obsidian2.Setting(containerEl).setName(t("settings.model.name")).setDesc(t("settings.model.desc")).addText(
      (text) => text.setPlaceholder(t("settings.model.placeholder")).setValue(this.plugin.settings.model).onChange(async (value) => {
        this.plugin.settings.model = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("settings.gemini_api_key.name")).setDesc(t("settings.gemini_api_key.desc")).addText(
      (text) => text.setPlaceholder(t("settings.gemini_api_key.placeholder")).setValue(this.plugin.settings.geminiApiKey).onChange(async (value) => {
        this.plugin.settings.geminiApiKey = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("settings.prompt_template.name")).setDesc(t("settings.prompt_template.desc")).addTextArea(
      (text) => text.setPlaceholder(t("settings.prompt_template.placeholder")).setValue(this.plugin.settings.promptTemplate).onChange(async (value) => {
        this.plugin.settings.promptTemplate = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/organizer-view.ts
var import_obsidian3 = require("obsidian");
var VIEW_TYPE_ORGANIZER = "organizer-view";
var OrganizerView = class extends import_obsidian3.ItemView {
  constructor(leaf) {
    super(leaf);
    this.icon = "sparkles";
    this.vaultEventRefs = [];
  }
  getViewType() {
    return VIEW_TYPE_ORGANIZER;
  }
  getDisplayText() {
    return "Organizer";
  }
  async onOpen() {
    this.containerEl.children[1].addClass("no-padding");
    const container = this.containerEl.children[1];
    container.empty();
    const navHeader = container.createDiv({
      cls: "nav-header"
    });
    const navButtonsContainer = navHeader.createDiv({
      cls: "nav-buttons-container"
    });
    const locateButton = navButtonsContainer.createDiv({
      cls: "clickable-icon nav-action-button"
    });
    (0, import_obsidian3.setIcon)(locateButton, "locate-fixed");
    (0, import_obsidian3.setTooltip)(locateButton, t("organizer_view.select_current_note"));
    locateButton.addEventListener("click", () => {
      this.selectCurrentNote();
    });
    const playButton = navButtonsContainer.createDiv({
      cls: "clickable-icon nav-action-button"
    });
    (0, import_obsidian3.setIcon)(playButton, "play");
    (0, import_obsidian3.setTooltip)(playButton, t("organizer_view.start_organizing"));
    const inputContainer = navHeader.createDiv({
      cls: "file-selection-container"
    });
    const fileSelectDropdown = new import_obsidian3.DropdownComponent(inputContainer);
    this.fileSelectDropdown = fileSelectDropdown;
    fileSelectDropdown.selectEl.style.width = "100%";
    this.updateFileList();
    this.vaultEventRefs.push(
      this.app.vault.on("create", () => this.updateFileList()),
      this.app.vault.on("delete", () => this.updateFileList()),
      this.app.vault.on("rename", () => this.updateFileList())
    );
  }
  async onClose() {
    this.vaultEventRefs.forEach((ref) => this.app.vault.offref(ref));
    this.vaultEventRefs = [];
  }
  updateFileList() {
    if (!this.fileSelectDropdown)
      return;
    const currentValue = this.fileSelectDropdown.getValue();
    this.fileSelectDropdown.selectEl.empty();
    this.fileSelectDropdown.addOption(
      "",
      t("organizer_view.file_selector.placeholder")
    );
    const markdownFiles = this.app.vault.getMarkdownFiles();
    markdownFiles.forEach((file) => {
      var _a;
      (_a = this.fileSelectDropdown) == null ? void 0 : _a.addOption(file.path, file.basename);
    });
    const fileExists = markdownFiles.some(
      (file) => file.path === currentValue
    );
    this.fileSelectDropdown.setValue(fileExists ? currentValue : "");
  }
  selectCurrentNote() {
    var _a;
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      (_a = this.fileSelectDropdown) == null ? void 0 : _a.setValue(activeFile.path);
    }
  }
};

// src/main.ts
var OrganizerPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.statusBarItem = null;
  }
  async onload() {
    await this.loadSettings();
    this.initStatusBar();
    this.registerView(
      VIEW_TYPE_ORGANIZER,
      (leaf) => new OrganizerView(leaf)
    );
    this.addRibbonIcon(
      "sparkles",
      t("organizer_plugin.activate_view"),
      () => {
        this.activateView();
      }
    );
    this.addSettingTab(new OrganizerPluginSettingTab(this.app, this));
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_ORGANIZER);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_ORGANIZER);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (!leaf) {
        new import_obsidian4.Notice(t("organizer_plugin.leaf_is_null"));
        return;
      }
      await leaf.setViewState({
        type: VIEW_TYPE_ORGANIZER,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  initStatusBar() {
    const statusBar = this.addStatusBarItem();
    statusBar.addClass(
      "organizer-status",
      "status-bar-item",
      "status-bar-item-icon",
      "mod-clickable"
    );
    (0, import_obsidian4.setIcon)(statusBar, "sparkles");
    (0, import_obsidian4.setTooltip)(statusBar, t("organizer_plugin.activate_view"), {
      placement: "top"
    });
    statusBar.addEventListener("click", () => {
      this.activateView();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
